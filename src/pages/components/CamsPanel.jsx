import React, { useEffect, useRef, useState } from "react";
import "./CamsPanel.css";
import CamsRow from "./CamsRow";

function CamsPanel({ onSelectCamera, onRegistryChange = () => {} }) {
    const [usbCams, setUsbCams] = useState([]);
    const [ipCams, setIpCams] = useState([]);
    const [NameInput, setNameInput] = useState("");
    const [URLInput, setURLInput] = useState("");
    const [selectedId, setSelectedId] = useState(null);

    // –°—á—ë—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö numericId IP-–∫–∞–º–µ—Ä (int –¥–ª—è API)
    const ipIdRef = useRef(1);

    useEffect(() => {
        // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            console.warn("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API enumerateDevices.");
            return;
        }

        // 2) –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å labels (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        navigator.mediaDevices
            .getUserMedia({ video: true })
            .then((s) => s.getTracks().forEach((t) => t.stop()))
            .catch(() => {
                console.warn("–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ USB-–∫–∞–º–µ—Ä.");
            })
            .finally(() => {
                // 3) –í—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º enumerateDevices
                navigator.mediaDevices
                    .enumerateDevices()
                    .then((devices) => {
                        const videoInputs = devices.filter((d) => d.kind === "videoinput");

                        const mapped = videoInputs.map((d, idx) => ({
                            id: d.deviceId || `no-id-${idx}`,
                            name: d.label || `USB Camera ${idx + 1}`,
                            type: "usb",
                            deviceId: d.deviceId,   // –≤–∞–∂–Ω–æ –¥–ª—è getUserMedia(exact)
                            numericId: 1000 + idx,  // int –¥–ª—è camera_id
                        }));

                        setUsbCams(mapped);

                        // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π USB-–∫–∞–º–µ—Ä—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º deviceId (–¢–û–õ–¨–ö–û –ø—Ä–∏ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
                        const firstValid = mapped.find((c) => !!c.deviceId);
                        if (!selectedId && firstValid) {
                            setSelectedId(firstValid.id);
                            onSelectCamera(firstValid);
                        } else if (!selectedId && mapped.length === 0) {
                            console.log("USB-–∫–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                        }
                    })
                    .catch((err) => {
                        console.error("–û—à–∏–±–∫–∞ enumerateDevices:", err);
                    });
            });
        // –í–ê–ñ–ù–û: –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é —Å–º–µ–Ω—É onSelectCamera/stream
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // üî∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–µ—Ä—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        const all = [...usbCams, ...ipCams];
        onRegistryChange(all);
    }, [usbCams, ipCams, onRegistryChange]);

    const handleRowClick = (cam) => {
        if (cam.id === selectedId) return; // –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é
        setSelectedId(cam.id);
        onSelectCamera(cam);
    };

    const handleDelete = (id) => {
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ IP
        setIpCams((prev) => {
            const next = prev.filter((cam) => cam.id !== id);

            // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é IP ‚Äî –≤—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–∑ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if (selectedId === id) {
                const fallback = [...usbCams, ...next].find(Boolean);
                if (fallback) {
                    setSelectedId(fallback.id);
                    onSelectCamera(fallback);
                } else {
                    setSelectedId(null);
                }
            }
            return next;
        });
    };

    const addCam = (id, name, url) => {
        const trimmedUrl = (url || "").trim();
        if (!trimmedUrl) return;
        const numericId = ipIdRef.current++;

        const cam = {
            id: `ip-${numericId}`,
            name: (name || "").trim() || `IP Camera ${numericId}`,
            type: "ip",
            url: trimmedUrl,
            numericId, // int –¥–ª—è camera_id
        };

        setIpCams((prev) => [...prev, cam]);

        // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∞–≤—Ç–æ—Å–µ–ª–µ–∫—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π IP-–∫–∞–º–µ—Ä—ã:
        // setSelectedId(cam.id);
        // onSelectCamera(cam);
    };

    const allCams = [...usbCams, ...ipCams];

    return (
        <div className="CamsPanel">
            <div className="AddCam">
                <input
                    className="NameInput"
                    placeholder="–ò–º—è IP-–∫–∞–º–µ—Ä—ã"
                    value={NameInput}
                    onChange={(e) => setNameInput(e.target.value)}
                />
                <input
                    className="URLInput"
                    placeholder="URL –ø–æ—Ç–æ–∫–∞"
                    value={URLInput}
                    onChange={(e) => setURLInput(e.target.value)}
                />
                <button
                    className="AddCamButton"
                    onClick={() => {
                        addCam(ipCams.length + 1, NameInput || "–ë–µ–∑—ã–º—è–Ω–Ω–∞—è", URLInput);
                        setNameInput("");
                        setURLInput("");
                    }}
                    title="–î–æ–±–∞–≤–∏—Ç—å IP-–∫–∞–º–µ—Ä—É"
                >
                    ‚ûï
                </button>
            </div>

            {allCams.map((cam) => (
                <CamsRow
                    key={cam.id}
                    id={cam.id}
                    name={`${cam.name}${Number.isInteger(cam.numericId) ? ` (#${cam.numericId})` : ""}`}
                    isSelected={cam.id === selectedId}
                    onClick={() => handleRowClick(cam)}
                    onDelete={handleDelete}
                />
            ))}
        </div>
    );
}

export default CamsPanel;
