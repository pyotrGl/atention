import React, { useCallback, useEffect, useRef, useState } from "react";
import config from "../../config";
import VideoPanel from "../components/VideoPanel";
import LogsPanel from "../components/LogsPanel";
import CamsPanel from "../components/CamsPanel";
import "./MainPage.css"; // –¥–æ–±–∞–≤—å –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
/**
 * MainPage
 *
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç:
 *  - –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø–æ WebSocket –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π (boxes)
 *  - –í—ã–±–æ—Ä–æ–º –∫–∞–º–µ—Ä—ã (USB / IP) –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º MediaStream
 *  - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π JPEG-–∫–∞–¥—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 *
 * –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 *  - –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –æ—á–∏—Å—Ç–∫–∏: —Ç–∞–π–º–µ—Ä—ã/–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã/—Å—Ç—Ä–∏–º—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 *  - –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ —á–µ—Ä–µ–∑ useCallback, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å –ª–∏—à–Ω–∏–π —Ä–∞–∑
 *  - –ë–µ—Ä–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å WebSocket: heartbeat (ping/pong) + –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
 */
function MainPage() {
    // === Refs –¥–ª—è –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π ===
    const wsRef = useRef(null); // –∞–∫—Ç–∏–≤–Ω—ã–π WebSocket
    const pingTimerRef = useRef(null); // id setInterval –¥–ª—è heartbeat
    const reconnectTimerRef = useRef(null); // id setTimeout –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const captureCanvasRef = useRef(document.createElement("canvas")); // –∫–∞–Ω–≤–∞—Å –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JPEG
    const reconnectAttemptsRef = useRef(0); // —Å—á—ë—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff)

    // === –°–æ—Å—Ç–æ—è–Ω–∏–µ UI/–¥–∞–Ω–Ω—ã—Ö ===
    const [stream, setStream] = useState(null); // –∞–∫—Ç–∏–≤–Ω—ã–π MediaStream (USB –∫–∞–º–µ—Ä–∞)
    const [ipUrl, setIpUrl] = useState(null); // URL IP-–∫–∞–º–µ—Ä—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω IP —Ä–µ–∂–∏–º)
    const [boxes, setBoxes] = useState([]); // –æ–±—ä–µ–∫—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    // === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∞–π–º–∏–Ω–≥–æ–≤ (—É–¥–æ–±–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ) ===
    const PING_INTERVAL_MS = 30_000; // —Ä–∞–∑ –≤ 30 —Å–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
    const FRAME_INTERVAL_MS = 200; // –∫–∞–∂–¥—ã–µ 200 –º—Å —à–ª—ë–º –∫–∞–¥—Ä

    /**
     * –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π WebSocket.
     * –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
     */
    const cleanupWebSocket = useCallback(() => {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat
        if (pingTimerRef.current) {
            clearInterval(pingTimerRef.current);
            pingTimerRef.current = null;
        }

        // –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (reconnectTimerRef.current) {
            clearTimeout(reconnectTimerRef.current);
            reconnectTimerRef.current = null;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –∂–∏–≤
        if (wsRef.current && wsRef.current.readyState !== WebSocket.CLOSED) {
            try {
                wsRef.current.close();
            } catch (_) {
                // –∏–≥–Ω–æ—Ä: –ø—Ä–∏ —Ä–µ–¥–∫–∏—Ö –≥–æ–Ω–∫–∞—Ö close –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å
            }
        }

        wsRef.current = null;
    }, []);

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
     * –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ config.videoWS (—Å—Ç–∞–±–∏–ª–µ–Ω) ‚Äî –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã.
     */
    const connectWS = useCallback(() => {
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cleanupWebSocket();

        const ws = new WebSocket(config.videoWS);
        ws.binaryType = "arraybuffer"; // —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –±–∏–Ω–∞—Ä—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        wsRef.current = ws;

        ws.onopen = () => {
            // –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∫–æ–Ω–Ω–µ–∫—Ç–µ
            reconnectAttemptsRef.current = 0;
            // –ó–∞–ø—É—Å–∫ heartbeat
            pingTimerRef.current = setInterval(() => {
                if (ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({ type: "ping" }));
                }
            }, PING_INTERVAL_MS);

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            // eslint-disable-next-line no-console
            console.log("WS open üëç");
        };

        ws.onmessage = ({ data }) => {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∏–Ω–∞—Ä—å), —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            try {
                const msg = JSON.parse(data);
                if (msg?.type === "pong") return; // –æ—Ç–≤–µ—Ç –Ω–∞ ping ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–∞—Å—Å–∏–≤ –±–æ–∫—Å–æ–≤; –∫–ª–∞–¥—ë–º –≤ —Å—Ç–µ–π—Ç
                setBoxes(msg);
            } catch (_) {
                // –Ω–µ JSON ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }
        };

        ws.onerror = (e) => {
            // eslint-disable-next-line no-console
            console.error("WS error:", e);
        };

        ws.onclose = () => {
            // eslint-disable-next-line no-console
            console.log("WS closed, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è‚Ä¶ üöÄ");

            // —á–∏—Å—Ç–∏–º heartbeat/—Ç–∞–π–º–µ—Ä—ã
            if (pingTimerRef.current) {
                clearInterval(pingTimerRef.current);
                pingTimerRef.current = null;
            }

            // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π backoff: 1s * (1 + –ø–æ–ø—ã—Ç–∫–∏), –Ω–æ —Å —Ä–∞–∑—É–º–Ω—ã–º –ø–æ—Ç–æ–ª–∫–æ–º 5s
            const attempt = Math.min(reconnectAttemptsRef.current + 1, 5);
            reconnectAttemptsRef.current = attempt;
            const delay = 1000 * attempt;

            reconnectTimerRef.current = setTimeout(() => {
                connectWS();
            }, delay);
        };
    }, [cleanupWebSocket, PING_INTERVAL_MS]);

    // === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ===
    useEffect(() => {
        connectWS();
        return () => {
            cleanupWebSocket();
        };
    }, [connectWS, cleanupWebSocket]);

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ JPEG.
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π MediaStream (USB); –¥–ª—è IP –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ VideoPanel —Å–∞–º —Ç—è–Ω–µ—Ç –ø–æ—Ç–æ–∫ –ø–æ URL.
     */
    useEffect(() => {
        if (!stream) return undefined;

        // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≤–∏–¥–µ–æ—Ç—Ä–µ–∫ –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        const videoTrack = stream.getVideoTracks()[0];
        if (!videoTrack) return undefined;

        const { width, height } = videoTrack.getSettings();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
        const canvas = captureCanvasRef.current;
        canvas.width = width || 0; // –∑–∞—â–∏—Ç–∞ –æ—Ç undefined
        canvas.height = height || 0;
        const ctx = canvas.getContext("2d", { willReadFrequently: false });

        // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä—ë—Ç <video> —Å –∫–ª–∞—Å—Å–æ–º .video-element, —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∞ –∫–∞–Ω–≤–∞—Å –∏ —à–ª—ë—Ç JPEG –≤ —Å–æ–∫–µ—Ç
        const sendFrame = () => {
            const ws = wsRef.current;
            if (!ws || ws.readyState !== WebSocket.OPEN) return;

            // ‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ VideoPanel —Ä–µ–Ω–¥–µ—Ä–∏—Ç <video class="video-element" />
            const videoEl = document.querySelector(".video-element");
            if (!videoEl || !width || !height) return;

            try {
                ctx.drawImage(videoEl, 0, 0, width, height);
                // –ö–∞—á–µ—Å—Ç–≤–æ 0.7 ‚Äî –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–æ–º –∏ –¥–µ—Ç–∞–ª—è–º–∏
                canvas.toBlob(
                    (blob) => {
                        if (blob && ws.readyState === WebSocket.OPEN) {
                            ws.send(blob);
                        }
                    },
                    "image/jpeg",
                    0.7
                );
            } catch (err) {
                // eslint-disable-next-line no-console
                console.error("sendFrame error:", err);
            }
        };

        const intervalId = setInterval(sendFrame, FRAME_INTERVAL_MS);
        return () => clearInterval(intervalId);
    }, [stream, FRAME_INTERVAL_MS]);

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–º–µ—Ä—ã –∏–∑ CamsPanel.
     * @param {{ type: 'usb'|'ip', deviceId?: string, url?: string }} cam
     */
    const handleCameraSelection = useCallback((cam) => {
        // 1) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º (–µ—Å–ª–∏ –±—ã–ª)
        if (stream) {
            try {
                stream.getTracks().forEach((t) => t.stop());
            } catch (_) {
                // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–±–æ–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–æ–≤
            }
        }

        // 2) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        setStream(null);
        setIpUrl(null);

        // 3) –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        if (cam?.type === "usb" && cam.deviceId) {
            navigator.mediaDevices
                .getUserMedia({ video: { deviceId: { exact: cam.deviceId } } })
                .then((newStream) => {
                    setStream(newStream);
                })
                .catch((e) => {
                    // eslint-disable-next-line no-console
                    console.error("USB getUserMedia error:", e);
                });
        } else if (cam?.type === "ip" && cam.url) {
            setIpUrl(cam.url);
        } else {
            // eslint-disable-next-line no-console
            console.warn("Unknown camera selection payload:", cam);
        }
    }, [stream]);

    // === –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞ MediaStream –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
    useEffect(() => {
        return () => {
            if (stream) {
                try {
                    stream.getTracks().forEach((t) => t.stop());
                } catch (_) {
                    // ignore
                }
            }
        };
    }, [stream]);

    // === –†–µ–Ω–¥–µ—Ä ===

    return (
        <div className="MainPage">
            <div className="top-section">
                <CamsPanel onSelectCamera={handleCameraSelection} />
                <div className="VideoWrap">
                    <VideoPanel stream={stream} ipUrl={ipUrl} boxes={boxes} />
                </div>
            </div>
            <div className="bottom-section">
                <LogsPanel objects={boxes} />
            </div>
        </div>
    );
}

export default MainPage;
